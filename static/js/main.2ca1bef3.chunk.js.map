{"version":3,"sources":["serviceWorker.js","Snake.js","Food.js","SpeechDirection.js","index.js"],"names":["Boolean","window","location","hostname","match","props","slen","snakeDots","length","classname","direction","map","dot","i","style","left","top","className","key","FoodDot","initialState","getRandomFoodDot","Math","floor","random","timer","Dictaphone","state","speed","speech","onkeyDown","e","event","vspeed","cDirection","keyCode","setState","clearInterval","setInterval","moveSnake","dots","head","push","shift","checkifCollapsed","snake","food","pop","forEach","alert","checkOutofBorders","resetTranscript","this","recognition","lang","document","onkeydown","checkIfEat","enlargeSnake","increaseSpeed","newSnake","unshift","transcript","trans","interimTranscript","toString","toLowerCase","includes","startsWith","endsWith","name","content","Snake","Food","Component","SpeechRecognition","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ca1bef3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport default (props) =>{\n    let slen = props.snakeDots.length;\n    let direction = props.direction;\n    let classname = \"snake-head \"+direction;\n    return (\n        <div> \n            {\n            \n            props.snakeDots.map((dot,i)=>\n            {\n                const style={\n                    left:`${dot[0]}%`,\n                    top:`${dot[1]}%`,\n                }\n                if(i===(slen-1)){\n                    return (<div className={classname} key={i} style={style}> </div>);\n                }\n                return (<div className=\"snake-dot\" key={i} style={style}> </div>);\n            })\n            }\n        </div>\n    )\n}","import React from 'react';\n\nexport default (props) =>{\n    const style={\n        left:`${props.FoodDot[0]}%`,\n        top:`${props.FoodDot[1]}%`,\n    }\n    return (\n        \n        <div>\n            <div className=\"food-dot\" style={style}> </div>\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  recognition: PropTypes.object,\n  resetTranscript: PropTypes.func,\n  interimTranscript:PropTypes.string\n}\n\nconst initialState=[\n  [0,0],\n  [2,0],\n  [4,0]\n];\n\nconst getRandomFoodDot=()=>{\n    //should not be point on snake body .  implement after learning HOOKs\n    let min=6;\n    let max=92;\n    var x = Math.floor((Math.random()* (max-min+1) + min)/2)*2;\n    var y = Math.floor((Math.random()* (max-min+1) + min)/2)*2;\n    var dot= [x,y];\n    return dot;\n  };\n\nvar timer=0;\n\nclass Dictaphone extends Component {\n\n  \n  \n  componentWillMount() {\n    const { recognition } = this.props\n   \n    recognition.lang = 'en-IN'\n    \n  }\n\n  state={\n    snakeDots:initialState,\n    speed:300,\n    direction:'RIGHT',\n    FoodDot: getRandomFoodDot(),\n    speech:'none'\n  }\n\n  componentDidMount(){\n      let speed=this.state.speed;\n      clearInterval(timer);\n      timer = setInterval(this.moveSnake,speed);\n\n      document.onkeydown = this.onkeyDown;\n     \n  }\n  componentDidUpdate(){\n    let speed=this.state.speed;\n    clearInterval(timer);\n    timer = setInterval(this.moveSnake,speed);\n    this.checkOutofBorders();\n    //this.checkifCollapsed();\n    this.checkIfEat();\n  }\n\n  onkeyDown=(e)=>{\n    e = e || window.event;\n    let vspeed= this.state.speed;\n    let cDirection = this.state.direction;\n    switch(e.keyCode){\n        case 37:\n          if(cDirection!='RIGHT')\n            this.setState({direction:'LEFT'});\n          break;\n        case 38:\n          if(cDirection!='DOWN')\n            this.setState({direction:'UP'})\n          break;\n        case 39:\n          if(cDirection!='LEFT')\n            this.setState({direction:'RIGHT'})\n          break;\n        case 40:\n          if(cDirection!='UP')\n            this.setState({direction:'DOWN'})\n          break;\n        case 65:\n          this.setState({\n            speed : vspeed-50\n          })\n          clearInterval(timer);\n          timer = setInterval(this.moveSnake,vspeed);\n         \n          break;\n        case 83:\n          this.setState({\n              speed : vspeed+50\n            })\n          clearInterval(timer);\n          timer = setInterval(this.moveSnake,vspeed);\n          \n          break;\n\n    }\n  }\n\n  moveSnake=()=>{\n      let dots= [...this.state.snakeDots];\n      let head = dots[dots.length-1];\n\n      switch(this.state.direction){\n        case 'RIGHT':\n          head = [head[0]+2,head[1]];\n          break;\n        case 'LEFT':\n          head = [head[0]-2,head[1]];\n          break;\n        case 'UP':\n          head = [head[0],head[1]-2];\n          break;\n        case 'DOWN':\n          head = [head[0],head[1]+2];\n          break;\n      }\n      dots.push(head);\n      dots.shift();\n      this.setState(\n        {snakeDots:dots}\n      )\n  }\n\n  checkifCollapsed=()=>{\n      let snake =[...this.state.snakeDots];\n      let head= snake[snake.length-1];\n      let food=this.state.FoodDot;\n      snake.pop();\n      \n      snake.forEach(dot=>{\n        if( (head[0]==dot[0] && head[1]==dot[1]) && !(dot[0]==food[0] && dot[0]==food[1]) ){\n          alert(\"Game Over!!! Score : \"+this.state.snakeDots.length);\n        }\n      })\n\n  }\n  checkOutofBorders=()=>{\n    let head= this.state.snakeDots[this.state.snakeDots.length-1];\n    const {resetTranscript} = this.props\n    if( (head[0]<0 || head[0]>99 ) || (head[1]<0 || head[1]>99 )){\n      alert(\"Game Over!!! Score : \"+ (this.state.snakeDots.length-3));\n      this.setState(\n        { snakeDots:initialState,\n          speed:300,\n          direction:'RIGHT',\n          FoodDot: getRandomFoodDot(),\n          speech:'none'}     \n      )\n      resetTranscript();\n    }\n  }\n\n  checkIfEat(){\n    let head= this.state.snakeDots[this.state.snakeDots.length-1];\n    let head2=this.state.snakeDots[0];\n    let food= this.state.FoodDot;\n    /*\n     if((head[0]==food[0] && head[0]==food[1])||\n      head2[0]==food[0] && head2[0]==food[1]){\n       */\n    if((head[0]==food[0] && head[1]==food[1])){\n        this.setState(\n          {\n            FoodDot:getRandomFoodDot()\n          })  \n        this.enlargeSnake();\n        this.increaseSpeed();\n        \n    }\n  }\n  enlargeSnake(){\n    let newSnake=[...this.state.snakeDots];\n    newSnake.unshift(this.state.FoodDot);\n    this.setState({\n      snakeDots:newSnake\n    })\n  }\n\n  increaseSpeed(){\n    let vspeed= this.state.speed;\n      if(vspeed>10){\n        this.setState({\n          speed : vspeed-10\n        })\n      }\n    clearInterval(timer);\n    timer = setInterval(this.moveSnake,vspeed);\n  }\n  \n \n \n  \n  render() {\n    const { transcript } = this.props\n    const {resetTranscript} = this.props\n    const {interimTranscript} = this.props\n    \n    let trans = interimTranscript.toString().toLowerCase()  //transcript\n\n   \n    if (trans.length>0){\n      if(this.state.speech!=trans){\n        this.setState({speech:trans});\n      }\n    }\n    if(trans.includes('left')|| trans.includes('best')|| trans.includes(\"ft\") || trans.startsWith(\"l\") || trans=='l'){\n      this.setState({direction:'LEFT'});\n      resetTranscript();\n    }\n    if(trans.includes('down')|| trans.includes(\"n\")|| trans.startsWith(\"d\") || trans=='d'|| trans=='b'){\n      this.setState({direction:'DOWN'});\n      resetTranscript();\n    }\n    if(trans.includes('up') || trans.includes('aap') || trans.includes('ab') || trans.endsWith(\"p\") ||  trans=='u'){\n      this.setState({direction:'UP'});\n      resetTranscript();\n    }\n    if(trans.includes('right') || trans.includes('write') || trans.startsWith(\"r\")||trans.endsWith('ht') ||  trans=='r'){\n      this.setState({direction:'RIGHT'});\n      resetTranscript();\n    }\n\n\n\n    return (\n      \n      <div>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></meta>\n        <div className=\"scoreBoard\"> Score - {this.state.snakeDots.length-3}</div>\n        <div className=\"scoreBoard\"> Current Direction - {this.state.direction}<br/>\n        <span>Speech Recognised - {this.state.speech}</span>\n        </div>\n        <div className=\"gameArena\">\n          <Snake snakeDots={this.state.snakeDots} direction={this.state.direction}/>\n          <Food FoodDot={this.state.FoodDot}></Food>\n        </div>\n      </div>\n    )\n  }\n}\n\nDictaphone.propTypes = propTypes\n\nexport default SpeechRecognition(Dictaphone)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SpeechDirecrtion from './SpeechDirection';\n\nReactDOM.render(\n  <React.StrictMode>\n   <SpeechDirecrtion/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}